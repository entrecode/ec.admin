(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{104:function(e,t,r){"use strict";r.d(t,"a",(function(){return m})),r.d(t,"b",(function(){return d}));var n=r(0),a=r.n(n);function c(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){c(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},c=Object.keys(e);for(n=0;n<c.length;n++)r=c[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(n=0;n<c.length;n++)r=c[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var b=a.a.createContext({}),s=function(e){var t=a.a.useContext(b),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},m=function(e){var t=s(e.components);return a.a.createElement(b.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},p=a.a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,c=e.originalType,i=e.parentName,b=l(e,["components","mdxType","originalType","parentName"]),m=s(r),p=n,d=m["".concat(i,".").concat(p)]||m[p]||u[p]||c;return r?a.a.createElement(d,o(o({ref:t},b),{},{components:r})):a.a.createElement(d,o({ref:t},b))}));function d(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var c=r.length,i=new Array(c);i[0]=p;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:n,i[1]=o;for(var b=2;b<c;b++)i[b]=r[b];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,r)}p.displayName="MDXCreateElement"},78:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return i})),r.d(t,"metadata",(function(){return o})),r.d(t,"rightToc",(function(){return l})),r.d(t,"default",(function(){return s}));var n=r(3),a=r(7),c=(r(0),r(104)),i={id:"entry-crud",title:"Entry CRUD",slug:"/entry-crud"},o={unversionedId:"entry-crud",id:"entry-crud",isDocsHomePage:!1,title:"Entry CRUD",description:"These components and helpers make it easy to use react-admin with ec entries.",source:"@site/docs/entry-crud.md",slug:"/entry-crud",permalink:"/ec.admin/docs/entry-crud",editUrl:"https://github.com/entrecode/ec.admin/edit/master/doc/docs/entry-crud.md",version:"current",sidebar:"someSidebar",previous:{title:"Hooks",permalink:"/ec.admin/docs/hooks"},next:{title:"Components",permalink:"/ec.admin/docs/components"}},l=[{value:"entryCrud",id:"entrycrud",children:[]},{value:"EntryList",id:"entrylist",children:[]},{value:"EntryEdit",id:"entryedit",children:[]},{value:"EntryCreate",id:"entrycreate",children:[]},{value:"EntryShow",id:"entryshow",children:[]},{value:"Custom Views",id:"custom-views",children:[]}],b={rightToc:l};function s(e){var t=e.components,r=Object(a.a)(e,["components"]);return Object(c.b)("wrapper",Object(n.a)({},b,r,{components:t,mdxType:"MDXLayout"}),Object(c.b)("p",null,"These components and helpers make it easy to use react-admin with ec entries."),Object(c.b)("h3",{id:"entrycrud"},Object(c.b)("a",Object(n.a)({parentName:"h3"},{href:"https://github.com/entrecode/ec.admin/blob/master/src/entryCrud.tsx"}),"entryCrud")),Object(c.b)("p",null,"Collection of generic CRUD components for entries. Intended to be used on a ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"https://marmelab.com/react-admin/Resource.html"}),"Resource")," using spread syntax:"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-jsx"}),"<Resource name={'muffin'} {...entryCrud} />\n")),Object(c.b)("p",null,"contains:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"list: ",Object(c.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/entrecode/ec.admin/blob/master/src/EntryList.tsx"}),"EntryList")),Object(c.b)("li",{parentName:"ul"},"create: ",Object(c.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/entrecode/ec.admin/blob/master/src/EntryCreate.tsx"}),"EntryCreate")),Object(c.b)("li",{parentName:"ul"},"edit: ",Object(c.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/entrecode/ec.admin/blob/master/src/EntryEdit.tsx"}),"EntryEdit")),Object(c.b)("li",{parentName:"ul"},"show: ",Object(c.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/entrecode/ec.admin/blob/master/src/EntryShow.tsx"}),"EntryShow"))),Object(c.b)("h3",{id:"entrylist"},Object(c.b)("a",Object(n.a)({parentName:"h3"},{href:"https://github.com/entrecode/ec.admin/blob/master/src/EntryList.tsx"}),"EntryList")),Object(c.b)("p",null,"Implements generic ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"https://marmelab.com/react-admin/List.html"}),"List")," for entries."),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"renders all model fields as a ",Object(c.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/fizix-io/ra-customizable-datagrid"}),"CustomizableDatagrid")," (according to field config)"),Object(c.b)("li",{parentName:"ul"},"each field is rendered as a ",Object(c.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/entrecode/ec.admin/blob/master/src/fields/TypeField.tsx"}),"TypeField")),Object(c.b)("li",{parentName:"ul"},"supports pagination, sorting, filtering + persistent field visibility."),Object(c.b)("li",{parentName:"ul"},"supports all field types, except account + roles"),Object(c.b)("li",{parentName:"ul"},"provides a ",Object(c.b)("a",Object(n.a)({parentName:"li"},{href:"https://marmelab.com/react-admin/List.html#the-filter-buttonform-combo"}),"filter")," for each filterable field."),Object(c.b)("li",{parentName:"ul"},"opens edit on click + has create button action.")),Object(c.b)("h3",{id:"entryedit"},Object(c.b)("a",Object(n.a)({parentName:"h3"},{href:"https://github.com/entrecode/ec.admin/blob/master/src/EntryEdit.tsx"}),"EntryEdit")),Object(c.b)("p",null,"Implements generic ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"https://marmelab.com/react-admin/CreateEdit.html"}),"Edit")," views for a single entry."),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"renders a ",Object(c.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/entrecode/ec.admin/blob/master/src/inputs/TypeInput.tsx"}),"TypeInput")," for each field (according to field config)"),Object(c.b)("li",{parentName:"ul"},"disables readOnly fields"),Object(c.b)("li",{parentName:"ul"},"currently only limited validation support"),Object(c.b)("li",{parentName:"ul"},"supports all field types except account, roles and entry/asset fields without validation."),Object(c.b)("li",{parentName:"ul"},"contains delete button")),Object(c.b)("h3",{id:"entrycreate"},Object(c.b)("a",Object(n.a)({parentName:"h3"},{href:"https://github.com/entrecode/ec.admin/blob/master/src/EntryCreate.tsx"}),"EntryCreate")),Object(c.b)("p",null,"Like EntryEdit, just for ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"https://marmelab.com/react-admin/CreateEdit.html"}),"Create"),", without readOnly fields and without delete button."),Object(c.b)("h3",{id:"entryshow"},Object(c.b)("a",Object(n.a)({parentName:"h3"},{href:"https://github.com/entrecode/ec.admin/blob/master/src/EntryShow.tsx"}),"EntryShow")),Object(c.b)("p",null,"Implements ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"https://marmelab.com/react-admin/Show.html"}),"Show")," view for a single entry."),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"renders field label + TypeField for each field (according to config).")),Object(c.b)("h2",{id:"custom-views"},"Custom Views"),Object(c.b)("p",null,"If you want to replace a generic CRUD view with a custom component, you can override its prop on the desired ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"https://marmelab.com/react-admin/Resource.html"}),"Resource"),":"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-jsx"}),"<Resource name={'muffin'} {...entryCrud} list={MuffinList} />\n")),Object(c.b)("p",null,"This will render ",Object(c.b)("inlineCode",{parentName:"p"},"MuffinList")," as custom list view. Of course, this is possible with any crud prop."),Object(c.b)("p",null,"The easiest way to implement a custom view is to copy the generic component and adjust the parts that should be custom. See also:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",Object(n.a)({parentName:"li"},{href:"./custom-list"}),"Custom List")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",Object(n.a)({parentName:"li"},{href:"./custom-form"}),"Custom Form"))))}s.isMDXComponent=!0}}]);