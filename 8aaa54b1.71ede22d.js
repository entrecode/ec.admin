(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{102:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return m}));var r=n(0),a=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function p(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?p(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):p(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=a.a.createContext({}),s=function(e){var t=a.a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},d=function(e){var t=s(e.components);return a.a.createElement(o.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},u=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,o=l(e,["components","mdxType","originalType","parentName"]),d=s(n),u=r,m=d["".concat(p,".").concat(u)]||d[u]||b[u]||i;return n?a.a.createElement(m,c(c({ref:t},o),{},{components:n})):a.a.createElement(m,c({ref:t},o))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,p=new Array(i);p[0]=u;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:r,p[1]=c;for(var o=2;o<i;o++)p[o]=n[o];return a.a.createElement.apply(null,p)}return a.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},81:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return p})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return s}));var r=n(3),a=n(7),i=(n(0),n(102)),p={id:"helpers",title:"Helpers",slug:"/helpers"},c={unversionedId:"helpers",id:"helpers",isDocsHomePage:!1,title:"Helpers",description:"Field vs Input vs Filter",source:"@site/docs/helpers.md",slug:"/helpers",permalink:"/ec.admin/docs/helpers",editUrl:"https://github.com/entrecode/ec.admin/edit/master/doc/docs/helpers.md",version:"current",sidebar:"someSidebar",previous:{title:"Entries",permalink:"/ec.admin/docs/entry-crud"}},l=[{value:"Field vs Input vs Filter",id:"field-vs-input-vs-filter",children:[]},{value:"Components",id:"components",children:[{value:"TypeField",id:"typefield",children:[]},{value:"TypeInput",id:"typeinput",children:[]},{value:"TypeFilter",id:"typefilter",children:[]}]},{value:"Props",id:"props",children:[{value:"fieldProps",id:"fieldprops",children:[]},{value:"inputProps",id:"inputprops",children:[]}]},{value:"useFields",id:"usefields",children:[]}],o={rightToc:l};function s(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},o,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"field-vs-input-vs-filter"},"Field vs Input vs Filter"),Object(i.b)("p",null,"To understand the naming of the following helpers, it is important to understand those basic three react-admin's component categories:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(r.a)({parentName:"li"},{href:"https://marmelab.com/react-admin/Fields.html"}),"Field"),": Display a value (in list cell or show view)"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(r.a)({parentName:"li"},{href:"https://marmelab.com/react-admin/Inputs.html"}),"Input"),": Edit a value (in edit or create view)"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(r.a)({parentName:"li"},{href:"https://marmelab.com/react-admin/List.html#filtering-the-list"}),"Filter"),": Edit a filter value (in list filter)")),Object(i.b)("h2",{id:"components"},"Components"),Object(i.b)("p",null,"For each of the above component categories, ec.admin comes prepacked with implementations for each ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://doc.entrecode.de/data_manager/#field-data-types"}),"ec entry field type"),"."),Object(i.b)("h3",{id:"typefield"},Object(i.b)("a",Object(r.a)({parentName:"h3"},{href:"https://github.com/entrecode/ec.admin/blob/master/src/fields/TypeField.tsx"}),"TypeField")),Object(i.b)("p",null,"Entry specific ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://marmelab.com/react-admin/Fields.html"}),"Field")," implementation. Renders the value of an entry field depending on its ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://doc.entrecode.de/data_manager/#field-data-types"}),"type"),". Used in EntryList and EntryShow."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-jsx"}),"<TypeField {...fieldProps('name', fieldConfig)} />\n")),Object(i.b)("h3",{id:"typeinput"},Object(i.b)("a",Object(r.a)({parentName:"h3"},{href:"https://github.com/entrecode/ec.admin/blob/master/src/inputs/TypeInput.tsx"}),"TypeInput")),Object(i.b)("p",null,"Entry specific ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://marmelab.com/react-admin/Inputs.html"}),"Input")," implementation. Renders the form input of an entry field depending on its ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://doc.entrecode.de/data_manager/#field-data-types"}),"type"),". Used in EntryCreate, EntryEdit."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-jsx"}),"<TypeInput {...inputProps('name', fieldConfig)} />\n")),Object(i.b)("h3",{id:"typefilter"},Object(i.b)("a",Object(r.a)({parentName:"h3"},{href:"https://github.com/entrecode/ec.admin/blob/master/src/filters/TypeFilter.tsx"}),"TypeFilter")),Object(i.b)("p",null,"Entry specific ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://marmelab.com/react-admin/Inputs.html"}),"Input")," Implementation. Renders the filter input of an entry field depending on its ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://doc.entrecode.de/data_manager/#field-data-types"}),"type"),". Used in EntryListFilter."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-jsx"}),"<TypeFilter {...inputProps('name', fieldConfig)} />\n")),Object(i.b)("h2",{id:"props"},"Props"),Object(i.b)("p",null,"In the above components, the props were passed using spread syntax and inputProps / fieldProps methods. These functions essentially return objects that have all props for the given property and fieldConfig."),Object(i.b)("h3",{id:"fieldprops"},Object(i.b)("a",Object(r.a)({parentName:"h3"},{href:"https://github.com/entrecode/ec.admin/blob/master/src/fields/fieldProps.tsx"}),"fieldProps")),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),"fieldProps(field, fieldConfig);\n")),Object(i.b)("p",null,"Returns entry field props that can be passed to a ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://marmelab.com/react-admin/Fields.html"}),"Field"),".\nAutomatically populates field type specific data. Expects fieldConfig as obtained from useFields hook."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-jsx"}),"<TextField {...fieldProps('name', fieldConfig)} />\n")),Object(i.b)("h3",{id:"inputprops"},Object(i.b)("a",Object(r.a)({parentName:"h3"},{href:"https://github.com/entrecode/ec.admin/blob/master/src/inputs/inputProps.tsx"}),"inputProps")),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),"inputProps(field, fieldConfig);\n")),Object(i.b)("p",null,"Returns entry field props that can be passed to an ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://marmelab.com/react-admin/Inputs.html"}),"Input"),".\nAutomatically populates input type specific data. Expects fieldConfig as obtained from useFields hook."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-jsx"}),"<TextInput {...inputProps('name', fieldConfig)} />\n")),Object(i.b)("h2",{id:"usefields"},Object(i.b)("a",Object(r.a)({parentName:"h2"},{href:"https://github.com/entrecode/ec.admin/blob/master/src/useFields.tsx"}),"useFields")),Object(i.b)("p",null,'Returns fieldConfig for given model. Appends system fields "id", "',"_",'created" and "',"_",'modified".\nIntended for usage as second argument for fieldProps / inputProps or as fieldConfig prop of EntryListFilter. Example:'),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"export const MyList = (props) => {\n  let { fieldConfig, defaultColumns } = useFields(props.resource);\n  if (!fieldConfig) {\n    return <Loading />;\n  }\n  /*\n    do something with fieldConfig\n  */\n};\n")))}s.isMDXComponent=!0}}]);