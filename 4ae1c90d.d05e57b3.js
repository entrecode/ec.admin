(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{109:function(e,t,a){"use strict";a.d(t,"a",(function(){return u})),a.d(t,"b",(function(){return b}));var n=a(0),r=a.n(n);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var c=r.a.createContext({}),d=function(e){var t=r.a.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},u=function(e){var t=d(e.components);return r.a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},m=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=d(a),m=n,b=u["".concat(o,".").concat(m)]||u[m]||p[m]||i;return a?r.a.createElement(b,l(l({ref:t},c),{},{components:a})):r.a.createElement(b,l({ref:t},c))}));function b(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:n,o[1]=l;for(var c=2;c<i;c++)o[c]=a[c];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,a)}m.displayName="MDXCreateElement"},80:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return o})),a.d(t,"metadata",(function(){return l})),a.d(t,"rightToc",(function(){return s})),a.d(t,"default",(function(){return d}));var n=a(3),r=a(7),i=(a(0),a(109)),o={id:"multiple-datamanagers",title:"Multiple Datamanagers",slug:"/multiple-datamanagers"},l={unversionedId:"multiple-datamanagers",id:"multiple-datamanagers",isDocsHomePage:!1,title:"Multiple Datamanagers",description:"As often required (e.g. clubapp.admin, light.admin), an admin should be able to work with multiple datamanagers at the same time. The current approach with useDatamanager does only support one datamanager.",source:"@site/docs/multiple-datamanagers.md",slug:"/multiple-datamanagers",permalink:"/ec.admin/docs/multiple-datamanagers",editUrl:"https://github.com/entrecode/ec.admin/edit/master/doc/docs/multiple-datamanagers.md",version:"current",sidebar:"someSidebar",previous:{title:"Resource Localization",permalink:"/ec.admin/docs/resource-localization"}},s=[{value:"Problem",id:"problem",children:[]},{value:"Solution",id:"solution",children:[{value:"List",id:"list",children:[]},{value:"getList",id:"getlist",children:[]},{value:"Edit",id:"edit",children:[]},{value:"getOne",id:"getone",children:[]},{value:"App",id:"app",children:[]}]},{value:"Whats missing",id:"whats-missing",children:[]}],c={rightToc:s};function d(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},c,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"As often required (e.g. clubapp.admin, light.admin), an admin should be able to work with multiple datamanagers at the same time. The current approach with ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"./hooks#usedatamanager"}),"useDatamanager")," does only support one datamanager."),Object(i.b)("h2",{id:"problem"},"Problem"),Object(i.b)("p",null,"react-admin is only intended to be used with a flat resource structure. That means, the routes will always be:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-txt"}),'"/" => default route / dashboard\n"/:resource" => resource list\n"/:resource/:id" => resource detail\n')),Object(i.b)("p",null,"When targetting multiple datamanagers, we are dealing with a deep structure:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-sh"}),"/:datamanager/:model/:entry\n")),Object(i.b)("p",null,"The above routing cannot map this structure out of the box. So, to solve this, we either need"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Nested Resources Feature in react-admin, which is currently not planned, see ",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/marmelab/react-admin/issues/261"}),"here")," and ",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"https://stackoverflow.com/questions/54255057/support-for-resource-nesting"}),"here")),Object(i.b)("li",{parentName:"ol"},"the nesting as part of :resource and/or :id + a data provider that handles it"),Object(i.b)("li",{parentName:"ol"},"the admin as a subroute of a ",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"https://marmelab.com/react-admin/CustomApp.html"}),"custom routing"))),Object(i.b)("p",null,"As #1 is unlikely and #3 requires a lot of customization work, let's look at #2."),Object(i.b)("h2",{id:"solution"},"Solution"),Object(i.b)("p",null,"As sugessted ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/marmelab/react-admin/issues/261#issuecomment-276427073"}),"here"),", we can make the entry list work when passing the dataManagerID as a filter param:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"// DataManagerFilter\nimport React from 'react';\nimport { Filter, SelectInput } from 'react-admin';\n\nexport const DataManagerFilter = (props) => (\n  <Filter {...props}>\n    <SelectInput\n      alwaysOn\n      source=\"dataManagerID\"\n      choices={[\n        // could also be dynamically loaded from a dataManager resource\n        { id: '2b5c50c8', name: 'light.benu' },\n        { id: '04306d2a', name: 'light.demo' },\n        { id: '903a09ad', name: 'light.someShop' },\n      ]}\n    />\n  </Filter>\n);\n")),Object(i.b)("h3",{id:"list"},"List"),Object(i.b)("p",null,"The filter can then be used in a custom list:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'export const OrderList = (props) => (\n  <List {...props} filters={<DataManagerFilter />}>\n    <Datagrid rowClick="edit">\n      <TextField source="id" />\n      <TextField source="name" />\n      <TextField source="email" />\n    </Datagrid>\n  </List>\n);\n// Fields could also be dynamically loaded\n')),Object(i.b)("h3",{id:"getlist"},"getList"),Object(i.b)("p",null,"Finally, the dataManagerID must be handled by the dataProvider:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"import dataProvider from './dataProvider'; // existing provider for a single datamanager\n\nconst dmProvider = {\n  getList: async (resource, params) => {\n    const { filter } = params;\n    if (!filter.dataManagerID) {\n      console.warn('no dataManagerID given as filter');\n      return { data: [], total: 0 }; // empty list\n    }\n    const dataManagerID = filter.dataManagerID;\n    delete filter.dataManagerID; // delete from filter as dataManagerID is not a real field\n    const p = await dataProvider(dataManagerID, env, true); // use existing single datamanager provider\n    return await p.getList(resource, { ...params, filter });\n  },\n};\n")),Object(i.b)("p",null,"The above provider just handles the dataManagerID filter, while the rest of the logic can be delegated to dataProvider."),Object(i.b)("h3",{id:"edit"},"Edit"),Object(i.b)("p",null,"Now for the Edit view:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'import React from \'react\';\nimport { Edit, SimpleForm, TextInput } from \'react-admin\';\n\nexport const OrderEdit = (props) => {\n  return (\n    <Edit {...props}>\n      <SimpleForm>\n        <TextInput source="id" />\n        <TextInput source="name" />\n        <TextInput source="email" />\n      </SimpleForm>\n    </Edit>\n  );\n};\n// Fields could also be dynamically loaded\n')),Object(i.b)("h3",{id:"getone"},"getOne"),Object(i.b)("p",null,'The Edit component will trigger dataProvider.getOne to be loaded. The Problem: We do not have a filter param, as it is only part of List. We need some way to pass the dataManagerID.. Solution: Use "absolute" entry ids of the form "shortID|entryID":'),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const dmProvider = {\n  getList: async (resource, params) => {\n    /* ... */\n    const { data, total } = await p.getList(resource, { ...params, filter });\n    return {\n      data: data.map((entry) => ({\n        ...entry,\n        id: `${dataManagerID}|${entry.id}`,\n      })),\n      total,\n    };\n  },\n};\n")),Object(i.b)("p",null,"These ids can then be split in getOne:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const dmProvider = {\n  getOne: async (resource, params) => {\n    const [dataManagerID, id] = params.id.split('|');\n    const p = await dataProvider(dataManagerID, env, true); // use existing dataProvider\n    const { data } = await p.getOne(resource, { ...params, id }); // pass only entryID\n    return { data: { ...data, id: `${dataManagerID}|${data.id}` } }; // add dmID again\n  },\n};\n")),Object(i.b)("h3",{id:"app"},"App"),Object(i.b)("p",null,"The best thing about this: It actually works! The App code looks like this:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const App = () => {\n  const dataProvider = useAsyncProvider(dmProvider, 'stage');\n  const authProvider = useSession();\n  if (!dataProvider || !authProvider) {\n    return <Loading />;\n  }\n  return (\n    <Admin dataProvider={dataProvider} authProvider={authProvider} theme={themes.light}>\n      <Resource name=\"ld_order\" list={OrderList} edit={OrderEdit} />\n    </Admin>\n  );\n};\nexport default App;\n")),Object(i.b)("h2",{id:"whats-missing"},"Whats missing"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Create: how to know which dm to use when having no id?"),Object(i.b)("li",{parentName:"ul"},"A way to load the field config dynamically. EntryList / EntryEdit do not work without a static PublicAPI available at dataProvider.api."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"./resource-caching"}),"Caching")," (new PublicAPI is created everytime)")))}d.isMDXComponent=!0}}]);